################################################################################
Concuerror started with options:
  [{'after-timeout',infinite},
   {assume_racing,false},
   {files,["/home/stavros/git/Concuerror/tests/suites/basic_tests/src/monitor_demonitor.erl"]},
   {normal_exit,[normal]},
   {symbolic,true},
   {target,{monitor_demonitor,monitor_demonitor,[]}},
   {verbose,0},
   {wait,2000}]
################################################################################
Erroneous interleaving 1:
* Blocked at a 'receive' (when all other processes have exited):
    P.2 in monitor_demonitor.erl line 13
    P.4 in monitor_demonitor.erl line 25
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.0.28650266>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.1.28650266>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.2.28650266>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.3.28650266>,[]])
    in erlang.erl line 2329
   5: P: exits normally
   6: P.2: ok = P.1 ! ok
    in monitor_demonitor.erl line 11
   7: Message (ok) from P.2 reaches P.1
   8: P.1: receives message (ok)
    in monitor_demonitor.erl line 9
   9: P.1: exits normally
  10: P.2: #Ref<0.0.0.137> = erlang:monitor(process, P.1)
    in monitor_demonitor.erl line 12
  11: Message ({'DOWN',#Ref<0.0.0.137>,process,P.1,noproc}) from P.2 reaches P.2
  12: P.4: #Ref<0.0.0.141> = erlang:monitor(process, P.3)
    in monitor_demonitor.erl line 20
  13: P.4: ok = P.3 ! ok
    in monitor_demonitor.erl line 21
  14: Message (ok) from P.4 reaches P.3
  15: P.3: receives message (ok)
    in monitor_demonitor.erl line 18
  16: P.3: exits normally
  17: P.3: {'DOWN',#Ref<0.0.0.141>,process,P.3,normal} = erlang:send(P.4, {'DOWN',#Ref<0.0.0.141>,process,P.3,normal})
    (while exiting)
  18: Message ({'DOWN',#Ref<0.0.0.141>,process,P.3,normal}) from P.3 reaches P.4
  19: P.4: true = erlang:demonitor(#Ref<0.0.0.141>)
    in monitor_demonitor.erl line 22
  20: P.4: receives message ({'DOWN',#Ref<0.0.0.141>,process,P.3,normal})
    in monitor_demonitor.erl line 23
################################################################################
Erroneous interleaving 2:
* Blocked at a 'receive' (when all other processes have exited):
    P.2 in monitor_demonitor.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.0.28650266>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.1.28650266>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.2.28650266>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.3.28650266>,[]])
    in erlang.erl line 2329
   5: P: exits normally
   6: P.2: ok = P.1 ! ok
    in monitor_demonitor.erl line 11
   7: Message (ok) from P.2 reaches P.1
   8: P.1: receives message (ok)
    in monitor_demonitor.erl line 9
   9: P.1: exits normally
  10: P.2: #Ref<0.0.0.137> = erlang:monitor(process, P.1)
    in monitor_demonitor.erl line 12
  11: Message ({'DOWN',#Ref<0.0.0.137>,process,P.1,noproc}) from P.2 reaches P.2
  12: P.4: #Ref<0.0.0.141> = erlang:monitor(process, P.3)
    in monitor_demonitor.erl line 20
  13: P.4: ok = P.3 ! ok
    in monitor_demonitor.erl line 21
  14: Message (ok) from P.4 reaches P.3
  15: P.3: receives message (ok)
    in monitor_demonitor.erl line 18
  16: P.3: exits normally
  17: P.3: {'DOWN',#Ref<0.0.0.141>,process,P.3,normal} = erlang:send(P.4, {'DOWN',#Ref<0.0.0.141>,process,P.3,normal})
    (while exiting)
  18: P.4: true = erlang:demonitor(#Ref<0.0.0.141>)
    in monitor_demonitor.erl line 22
  19: P.4: receive timeout expired after 0 ms
    in monitor_demonitor.erl line 23
  20: Message ({'DOWN',#Ref<0.0.0.141>,process,P.3,normal}) from P.3 reaches P.4
  21: P.4: exits normally
################################################################################
Erroneous interleaving 3:
* Blocked at a 'receive' (when all other processes have exited):
    P.2 in monitor_demonitor.erl line 13
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.0.28650266>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.1.28650266>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.2.28650266>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.3.28650266>,[]])
    in erlang.erl line 2329
   5: P: exits normally
   6: P.2: ok = P.1 ! ok
    in monitor_demonitor.erl line 11
   7: Message (ok) from P.2 reaches P.1
   8: P.1: receives message (ok)
    in monitor_demonitor.erl line 9
   9: P.1: exits normally
  10: P.2: #Ref<0.0.0.137> = erlang:monitor(process, P.1)
    in monitor_demonitor.erl line 12
  11: Message ({'DOWN',#Ref<0.0.0.137>,process,P.1,noproc}) from P.2 reaches P.2
  12: P.4: #Ref<0.0.0.141> = erlang:monitor(process, P.3)
    in monitor_demonitor.erl line 20
  13: P.4: ok = P.3 ! ok
    in monitor_demonitor.erl line 21
  14: Message (ok) from P.4 reaches P.3
  15: P.3: receives message (ok)
    in monitor_demonitor.erl line 18
  16: P.4: true = erlang:demonitor(#Ref<0.0.0.141>)
    in monitor_demonitor.erl line 22
  17: P.3: exits normally
  18: P.4: receive timeout expired after 0 ms
    in monitor_demonitor.erl line 23
  19: P.4: exits normally
################################################################################
Erroneous interleaving 4:
* Blocked at a 'receive' (when all other processes have exited):
    P.4 in monitor_demonitor.erl line 25
--------------------------------------------------------------------------------
Interleaving info:
   1: P: P.1 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.0.28650266>,[]])
    in erlang.erl line 2329
   2: P: P.2 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.1.28650266>,[]])
    in erlang.erl line 2329
   3: P: P.3 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.2.28650266>,[]])
    in erlang.erl line 2329
   4: P: P.4 = erlang:spawn(erlang, apply, [#Fun<monitor_demonitor.3.28650266>,[]])
    in erlang.erl line 2329
   5: P: exits normally
   6: P.2: ok = P.1 ! ok
    in monitor_demonitor.erl line 11
   7: Message (ok) from P.2 reaches P.1
   8: P.1: receives message (ok)
    in monitor_demonitor.erl line 9
   9: P.4: #Ref<0.0.0.141> = erlang:monitor(process, P.3)
    in monitor_demonitor.erl line 20
  10: P.4: ok = P.3 ! ok
    in monitor_demonitor.erl line 21
  11: Message (ok) from P.4 reaches P.3
  12: P.3: receives message (ok)
    in monitor_demonitor.erl line 18
  13: P.3: exits normally
  14: P.3: {'DOWN',#Ref<0.0.0.141>,process,P.3,normal} = erlang:send(P.4, {'DOWN',#Ref<0.0.0.141>,process,P.3,normal})
    (while exiting)
  15: Message ({'DOWN',#Ref<0.0.0.141>,process,P.3,normal}) from P.3 reaches P.4
  16: P.4: true = erlang:demonitor(#Ref<0.0.0.141>)
    in monitor_demonitor.erl line 22
  17: P.4: receives message ({'DOWN',#Ref<0.0.0.141>,process,P.3,normal})
    in monitor_demonitor.erl line 23
  18: P.2: #Ref<0.0.0.261> = erlang:monitor(process, P.1)
    in monitor_demonitor.erl line 12
  19: P.1: exits normally
  20: P.1: {'DOWN',#Ref<0.0.0.261>,process,P.1,normal} = erlang:send(P.2, {'DOWN',#Ref<0.0.0.261>,process,P.1,normal})
    (while exiting)
  21: Message ({'DOWN',#Ref<0.0.0.261>,process,P.1,normal}) from P.1 reaches P.2
  22: P.2: receives message ({'DOWN',#Ref<0.0.0.261>,process,P.1,normal})
    in monitor_demonitor.erl line 13
  23: P.2: exits normally
################################################################################
Done! (Exit status: completed)
  Summary: 4 errors, 6/6 interleavings explored
